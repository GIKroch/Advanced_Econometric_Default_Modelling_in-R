X_3 <- data
names(X_3)
glm(y_3 ~ myData[,"Attr1"], family=binomial(link= "logit"))
glm(y_3 ~ X_3[,"Attr1"], family=binomial(link= "logit"))
glm(y_3 ~ X_3[,"Attr2"], family=binomial(link= "logit"))
z <- glm(y_3 ~ X_3[,"Attr2"], family=binomial(link= "logit"))
z$coefficients
z$residuals
z$rank
summary(z)
summary(z)$coefficients
summary(z)$coefficients[,4]
summary(z)$coefficients[,4][1]
summary(z)$coefficients[,4][2]
summary(z)$coefficients[,4][2] > 2
summary(z)$coefficients[,4][2]
as.integer(summary(z)$coefficients[,4][2])
as.numeric(summary(z)$coefficients[,4][2]))
as.numeric(summary(z)$coefficients[,4][2])
selected_names <- c()
lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
selected_names <- c(selected_names, name)
}
})
lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
print(names)
selected_names <- c(selected_names, name)
}
})
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
print(name)
selected_names <- c(selected_names, name)
}
})
lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
selected_names[[name]] <- name
}
})
lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
print(name)
selected_names[[name]] <- name
}
return(selected_names)
})
xx <- lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
print(name)
selected_names[[name]] <- name
}
})
print(xx)
unlist(xx)
length(xx)
length(names(X_3))
selected_names <- c()
selected_names <- lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.25){
selected_names <- c(selected_names, name)
}
})
selected_names
unlist(selected_names)
selected_names <- unlist(selected_names)
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
selected_names <- c()
selected_names <- lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.2){
selected_names <- c(selected_names, name)
}
})
selected_names <- c()
selected_names <- lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.05){
selected_names <- c(selected_names, name)
}
})
selected_names <- c()
selected_names <- lapply(names(X_3),function(name){
one_cov <- glm(y_3 ~ X_3[,name], family=binomial(link= "logit"))
if (as.numeric(summary(one_cov)$coefficients[,4][2]) < 0.05){
print(summary(one_cov)$coefficients[,4][2])
selected_names <- c(selected_names, name)
}
})
corr <- round(cor(X_3), 1)
library(ggplot2)
ggcorplot(corr)
install.packages("ggcorrplot")
library(ggcorplot)
library(ggcorrplot)
ggcorplot(corr)
ggcorrplot(corr)
ggcorrplot(corr,p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank")
## However after running the code it occured that with such an approach every variable seems to be significant
p.mat <- cor_pmat(X_3)
ggcorrplot(corr,p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank")
as.data.frame(corr)
xxx <- as.data.frame(corr)
View(xxx)
install.packages("caret")
findCorrelation(x, cutoff = 0.9, verbose = FALSE, names = TRUE,
exact = ncol(x) < 100)
library(caret)
findCorrelation(x, cutoff = 0.9, verbose = FALSE, names = TRUE,
exact = ncol(x) < 100)
findCorrelation(X_3, cutoff = 0.9, verbose = FALSE, names = TRUE,
exact = ncol(x) < 100)
findCorrelation(X_3, cutoff = 0.9, verbose = FALSE, names = TRUE,
exact = ncol(X_3) < 100)
findCorrelation(corr, cutoff = 0.9, verbose = FALSE, names = TRUE,
exact = ncol(corr) < 100)
findCorrelation(corr, cutoff = 0.9, verbose = FALSE, names = F,
exact = ncol(corr) < 100)
findCorrelation(corr, cutoff = 0.9, verbose = FALSE, names = F,
exact = ncol(corr) < 100)
to_drop <- findCorrelation(corr, cutoff = 0.9, verbose = FALSE, names = F,
exact = ncol(corr) < 100)
X_3[,!to_drop]
X_3[,-to_drop]
X_3 <- X_3[,-to_drop]
View(X_3)
library(MASS)
# Fit the full model
full.model <- glm.fit(X_3, y_3,family=binomial(link= "logit"))
summary(full.model$coefficients
summary(full.model$coefficients)
summary(full.model$coefficients)
summary(full.model)$coefficients
summary(full.model)
full.model$coefficients
# Fit the full model
full.model <- glm.fit(X_3, y_3,family=binomial(link= "logit"), maxit = 100)
# Fit the full model
full.model <- glm.fit(X_3, y_3,family=binomial(link= "logit"), control = list(maxit = 100))
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
summary(full.model)
summary(full.model)$coefficients
full.model$coefficients
summary(full.model)
summary(full.model)$coefficients
summary(full.model)
sum <- summary(full.model)
typeof(full.model)
sum <- summary(full.model)
summary(full.model)
coef(step.model)
coef(full.model)
coef(full.model)[2]
coef(full.model)
coef(summary(full.model))[,4]
coef(summary(full.model))
coef(summary(full.model))
summary(full.model)
data1 <- data
data1 <- data1[,-to_drop]
## Now we have 45 dependent variables. It is still a lot. Our next step will be to run stepwise regression in order to limit number of
## features
head(data1)
data <- read.csv2("imputedData.csv")
missing_d <- data[rowSums(is.na(data))>0,]
sum(missing_d$class)
data <- data[rowSums(is.na(data))==0,]
is.na(data)
data1 <- data
data1 <- data1[,-to_drop]
# Fit the full model
full.model <- glm(formula = class ~.,data = data1, family=binomial(link= "logit"), control = list(maxit = 100))
summary(full.model)
coef(summary(full.model))[,4]
install.packages("logistf")
library(logistf)
logistf(formula = class ~.,data = data1)
# Fit the full model
full.model <- glm(formula = class ~.,data = data1, family=binomial(link= "logit"), control = list(maxit = 100))
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
# After running the stepwise regression we ended up with the model
summary(step.model)$coefficients
# After running the stepwise regression we ended up with the model
summary(step.model)$coefficients[,4]
# After running the stepwise regression we ended up with the model
len(summary(step.model)$coefficients[,4])
# After running the stepwise regression we ended up with the model
length(summary(step.model)$coefficients[,4])
# After running the stepwise regression we ended up with the model which uses 28 variables from which
summary(step.model)
# After running the stepwise regression we ended up with the model which uses 28 variables from which
summary(step.model)$coefficients
# After running the stepwise regression we ended up with the model which uses 28 variables from which
model_summary <- summary(step.model)
model_summary$coefficients
model_summary$df
model_summary$call
for (x in model_summary$coefficients)[,4]{
if (x <= 0.05){
i <- i + 1
}
}
for (x in model_summary$coefficients)[,4]){
if (x <= 0.05){
i <- i + 1
}
}
for (x in model_summary$coefficients[,4]){
if (x <= 0.05){
i <- i + 1
}
}
i <- 0
for (x in model_summary$coefficients[,4]){
if (x <= 0.05){
i <- i + 1
}
}
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
model_summary$coefficients
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
names(model_summary$coefficients)
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
colnames(model_summary$coefficients)
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
model_summary$coefficients[,1]
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
names(model_summary$coefficients[,1])
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
insignificants <- c()
insignificants <- for (x in model_summary$coefficients){
if (x[,4] <= 0.05){
insignificants <- c(insignificants, x[,1])
}
}
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
insignificants <- c()
insignificants <- for (x in model_summary$coefficients){
if (x[4] <= 0.05){
insignificants <- c(insignificants, x[1])
}
}
insignificants <- for (x in model_summary$coefficients){
print(x[,4])
if (x[,4] <= 0.05){
insignificants <- c(insignificants, x[1])
}
}
print(x[4])
print(x[4])
insignificants <- for (x in model_summary$coefficients){
print(x[4])
if (x[,4] <= 0.05){
insignificants <- c(insignificants, x[1])
}
}
x <- model_summary$coefficients
print(x)
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
insignificants <- c()
insignificants <- for (x in model_summary$coefficients[,1]){
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
}
}
insignificants <- for (x in model_summary$coefficients[,1]){
print(model_summary$coefficients[x,4])
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
}
}
print(x)
insignificants <- for (x in model_summary$coefficients[,1]){
print(x)
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
}
}
insignificants <- for (x in names(model_summary$coefficients[,1])){
print(x)
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
}
}
# Now we can get rid of those variables with pvalue higher than 0,05 and see if this improves our model
insignificants <- c()
insignificants <- for (x in names(model_summary$coefficients[,1])){
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
}
}
insignificants <- for (x in names(model_summary$coefficients[,1])){
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
}
return(insignificants)
}
insignificants <- for (x in names(model_summary$coefficients[,1])){
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
return(insignificants)
}
}
insignificants <- for (x in names(model_summary$coefficients[,1])){
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
print(x)
}
}
for (x in names(model_summary$coefficients[,1])){
if (model_summary$coefficients[x,4] <= 0.05){
insignificants <- c(insignificants, x)
print(x)
}
}
data1 <- data1[,-insignificants]
library(dplyr)
data1 %>% select(-insignificants)
data1 <- data1 %>% select(-insignificants)
str(data1)
# Now we can run the regression again, to see if the improvement was achieved
reduced_model <- glm(formula = class ~.,data = data1, family=binomial(link= "logit"), control = list(maxit = 100))
summary(reduced_model)
data1 <- data
data1 <- data1[,-to_drop]
full.model_firths <- logistf(formula = class ~.,data = data1)
summary(full.model_firths)$coefficients
summary(full.model_firths)
full.model_firths$coefficients
coef(summary(full.model_firths))
summary(full.model_firths)
full_model_firths_summary <- summary(full.model_firths)
full_model_firths_summary$coefficients
head(data1)
View(full.model)
full_model_firths_summary$coefficients
full_model_firths_summary$alpha
full_model_firths_summary$prob
for (x in full_model_firths_summary$prob){
print(name(x))
if (x <= 0.05){
i <- i + 1
}
}
i <- 0
for (x in full_model_firths_summary$prob){
print(names(x))
if (x <= 0.05){
i <- i + 1
}
}
i <- 0
for (x in full_model_firths_summary$prob){
print(x)
if (x <= 0.05){
i <- i + 1
}
}
names(full_model_firths_summary$prob)
full_model_firths_summary$prob["Attr3"]
step.model <- stepAIC(full.model_firths, direction = "forward",
trace = FALSE)
step.model <- stepAIC(full.model_firths, direction = "both",
trace = FALSE)
summary(full.model_firths)
full_model_firths_summary$prob
length(full_model_firths_summary$prob)
insignificants_firths <- c()
for (x in names(full_model_firths_summary$prob)){
print(x)
if (full_model_firths_summary$prob[x] <= 0.05){
insignificants_firths <- c(insignificants_firths,x)
i <- i + 1
}
}
insignificants_firths <- c()
for (x in names(full_model_firths_summary$prob)){
print(x)
if (full_model_firths_summary$prob[x] >= 0.05){
insignificants_firths <- c(insignificants_firths,x)
i <- i + 1
}
}
insignificants_firths <- c()
for (x in names(full_model_firths_summary$prob)){
print(x)
if (full_model_firths_summary$prob[x] >= 0.05){
insignificants_firths <- c(insignificants_firths,x)
i <- i + 1
}
}
final.model_firths <- logistf(formula = class ~.,data = data1 %>% select(-insignificants_firths))
final.model_firths$coefficients
final.model_firths$prob
datax <- read.arff("5year.arff")
colnames <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames <- c(colnames, "class")
datax$class <- as.numeric(data$class)
datax$class <- ifelse(data$class==2,1,0)
str(datax)
datax[,1:len(names(datax)) - 1]
datax[,1:length(names(datax)) - 1]
colnames
datax
colnamess <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames(datax) <- colnamess
datax
colnames(datax)
datax <- read.arff("5year.arff")
datax <- read.arff("5year.arff")
colnames <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames <- c(colnames, "class")
datax$class <- as.numeric(data$class)
datax$class <- ifelse(data$class==2,1,0)
datax
datax <- read.arff("5year.arff")
datax[,1:length(names(datax)) -1]
length(colnamess)
length(names(datax)) -1
colnamess
colnames(datax[,1:length(names(datax)) -1]) <- colnamess
datax[,1:64]
colnames(datax[,1:64]) <- c(colnamess, "default")
length(colnames(datax))
length(colnamess)
colnamess <- c(colnamess, "default")
colnamess
colnames(datax) <- colnamess
datax
unique(datax$default)
datax <- read.arff("5year.arff")
unique(datax)
unique(datax$class)
datax <- read.arff("5year.arff")
colnamess <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnamess <- c(colnamess, "default")
colnames(datax) <- colnamess
datax$class <- as.numeric(data$class)
datax$class <- ifelse(data$class==2,1,0)
datax <- read.arff("5year.arff")
colnamess <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnamess <- c(colnamess, "class")
colnames(datax) <- colnamess
datax$class <- as.numeric(data$class)
datax <- read.arff("5year.arff")
colnamess <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnamess <- c(colnamess, "class")
colnames(datax) <- colnamess
datax$class <- as.numeric(datax$class)
datax$class <- ifelse(datax$class==2,1,0)
datax
data <- read.arff("5year.arff")
colnames <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames <- c(colnames, "class")
data$class <- as.numeric(data$class)
data$class <- ifelse(data$class==2,1,0)
na_count_cols <- data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_cols$Attr <- colnames
na_count_cols <- na_count_cols[order(na_count_cols[,1], decreasing = TRUE),]
colnames(na_count_cols) <- c("Number of missing values", "Variable description")
kable(head(na_count_cols), format = "latex", row.names = T, align = "c") %>%
kable_styling(latex_options = c("HOLD_position"), full_width = F )
data$attr37 <- NULL
imputed_Data <- mice(data, m=5, maxit = 5, method = 'pmm', seed = 500)
View(data)
new_data <- complete(imputed_Data)
write.csv2(new_data, "imputedData.csv", row.names = FALSE)
View(data)
data <- read.arff("5year.arff")
colnamess <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames(data) <- c(colnamess, "class")
data$class <- as.numeric(data$class)
data$class <- ifelse(data$class==2,1,0)
View(data)
View(data)
View(imputed_Data)
data <- read.arff("5year.arff")
colnames <- as.character(read.csv2("column_names.csv", header = FALSE)$V2)
colnames <- c(colnames, "class")
colnames(data) <- colnames
data$class <- as.numeric(data$class)
data$class <- ifelse(data$class==2,1,0)
View(data)
na_count_cols <- data.frame(sapply(data, function(y) sum(length(which(is.na(y))))))
na_count_cols$Attr <- colnames
na_count_cols <- na_count_cols[order(na_count_cols[,1], decreasing = TRUE),]
colnames(na_count_cols) <- c("Number of missing values", "Variable description")
kable(head(na_count_cols), format = "latex", row.names = T, align = "c") %>%
kable_styling(latex_options = c("HOLD_position"), full_width = F )
data$`(current assets - inventories) / long-term liabilities ` <- NULL
View(na_count_cols)
imputed_Data <- mice(data, m=5, maxit = 5, method = 'pmm', seed = 500)
View(data)
